#ifndef _TARA_NETWORK_H_
#define _TARA_NETWORK_H_

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/file.h>
#include <errno.h>
#include "myglobal.h"
#include "myerr.h"


#define NET_CMD_SOCKET              "/tmp/.net_cmd"
#define MAX_HOSTNAME_LEN            253

enum {
	NET_CMD_GET_DHCP=0,
	NET_CMD_GET_ETHADDR,
	NET_CMD_GET_MAX,
	NET_CMD_SET_DHCP,
	NET_CMD_SET_IPV4ADDR,
	NET_CMD_SET_SUBNETMASK,
	NET_CMD_SET_GATEWAY,
	NET_CMD_SET_DNS,
	NET_CMD_SET_ETHADDR,
	NET_CMD_MAX
};

enum {
	NET_DHCP_OFF = 0,
	NET_DHCP_ON
};

typedef struct {
	s32 on;
	s32 invokeTimes;	// invoke times.
	s32 retries;			// send up to N request packets.
	s32 timeout;			// try to get a lease for N seconds; -1, is generated by random numbers
} TaraNetDhcpConfig;

#ifdef CPLUSPLUS
extern "C" {
#endif

/*
 * get the ip address of a network interface
 * return: ip address
 * ifname: interface name
 */
extern in_addr_t Tara_net_getIPv4Addr(char *ifname);

/*
 * configure the ip address for a network interface
 * return: 0 on success, otherwise error code returned
 * ifname: interface name
 * addr: on success, ip address of ifname will be stored
 */
extern s32 Tara_net_setIPv4Addr(char *ifname, in_addr_t addr);

/*
 * get the ip network mask of a network interface
 * return: network mask
 * ifname: interface name
 */
extern in_addr_t Tara_net_getSubnetMask(char *ifname);

/*
 * configure the ip network mask for a network interface
 * return: 0 on success, otherwise error code returned
 * ifname: interface name
 * addr: on success, network mask of ifname will be stored
 */
extern s32 Tara_net_setSubnetMask(char *ifname, in_addr_t addr);


/*
 * get gateway configuration
 * return: ip of gateway
 */
extern in_addr_t Tara_net_getGateway();

/*
 * configure the gateway for a network interface
 * return: 0 on success, otherwise error code returned
 * ifname: interface name
 * addr: ip address of the gateway will be stored
 */
extern s32 Tara_net_setGateway(char *ifname, in_addr_t addr);

/*
 * get DNS server ip address
 * return: ip address of the DNS
 */
extern in_addr_t Tara_net_getDNS();

/*
 * set DNS
 * return: 0 on success, otherwise error code returned
 * dnsname: on success, ip address of the DNS will be stored
 */
extern s32 Tara_net_setDNS(char *dnsname);

/*
 * get current DHCP mode
 * return: 1 for dynamic ip, 0 for static ip
 */
extern s32 Tara_net_getDHCP();

/*
 * configure DHCP mode
 * return: 0 on success, otherwise error code returned
 * on: 1: enable DHCP; 0: disable DHCP
 */
extern s32 Tara_net_setDHCP(s32 on);

/*
 * get mac address of an interface
 * return: on success, mac address will be returned; NULL if fail
 * ifname: interface name
 */
extern u8* Tara_net_getHWaddr(char *ifname);

/*
 * get ethaddr from uboot env.
 * return: ethaddr ; NULL : fail
 */
extern u8* Tara_net_getEthaddr();

/*
 * clear ethaddr address of uboot env.
 * return: 0 on success ; -1 on fail
 */
extern s32 Tara_net_delEthaddr();

/*
 * set mac address
 * mac: mac address
 * return: 0 on success ; -1 on fail
 */
extern s32 Tara_net_setEthaddr(u8 *mac);

/*
 * set host name
 * name: host name( not require a null-terminating string )
 * len: the number of bytes in name
 */
extern s32 Tara_net_setHostname(char *name, size_t len);

/*
 * get host name
 * return: the host name on success; null if fail
 */
extern s8* Tara_net_getHostname();
#ifdef CPLUSPLUS
}
#endif
#endif

